{"ast":null,"code":"var _jsxFileName = \"D:\\\\swiftrut\\\\Event Managment\\\\event-managment-app\\\\src\\\\component\\\\Event\\\\EditEventForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useEvent } from '../../hooks/useEvent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditEventForm = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the event ID from URL params\n  const {\n    getEventById,\n    updateEvent\n  } = useEvent(); // Custom hook to handle event fetching/updating\n  const navigate = useNavigate();\n  const [eventData, setEventData] = useState({\n    title: '',\n    description: '',\n    date: '',\n    location: '',\n    maxAttendees: 0,\n    image: null\n  });\n  const [loading, setLoading] = useState(true); // To handle loading state\n  const [error, setError] = useState(''); // To handle any errors\n\n  useEffect(() => {\n    const fetchEvent = async () => {\n      try {\n        const event = await getEventById(id); // Fetch event data by ID\n        if (event) {\n          setEventData(event); // Populate the form with fetched data\n        }\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to load event data');\n        setLoading(false);\n      }\n    };\n    fetchEvent();\n  }, [id, getEventById]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEventData({\n      ...eventData,\n      [name]: value\n    }); // Handle input changes for text, number, and date fields\n  };\n  const handleFileChange = e => {\n    setEventData({\n      ...eventData,\n      image: e.target.files[0]\n    }); // Handle file (image) input\n  };\n  const handleUpdateEvent = async e => {\n    e.preventDefault(); // Prevent default form submission\n    if (!eventData.title || !eventData.date || !eventData.location) {\n      setError('Please fill out all required fields');\n      return;\n    }\n    try {\n      await updateEvent(id, eventData); // Call the update function\n      navigate(`/event/${id}`); // Redirect to event details page after update\n    } catch (err) {\n      setError('Failed to update event');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpdateEvent,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"title\",\n        placeholder: \"Title\",\n        value: eventData.title,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"description\",\n        placeholder: \"Description\",\n        value: eventData.description,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"date\",\n        value: eventData.date,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"location\",\n        placeholder: \"Location\",\n        value: eventData.location,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"maxAttendees\",\n        placeholder: \"Max Attendees\",\n        value: eventData.maxAttendees,\n        onChange: e => setEventData({\n          ...eventData,\n          maxAttendees: parseInt(e.target.value)\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(EditEventForm, \"BlkVLbqcC9CqPWeyp93vxUpoPYk=\", false, function () {\n  return [useParams, useEvent, useNavigate];\n});\n_c = EditEventForm;\nexport default EditEventForm;\nvar _c;\n$RefreshReg$(_c, \"EditEventForm\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","useEvent","jsxDEV","_jsxDEV","EditEventForm","_s","id","getEventById","updateEvent","navigate","eventData","setEventData","title","description","date","location","maxAttendees","image","loading","setLoading","error","setError","fetchEvent","event","err","handleChange","e","name","value","target","handleFileChange","files","handleUpdateEvent","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","parseInt","style","color","_c","$RefreshReg$"],"sources":["D:/swiftrut/Event Managment/event-managment-app/src/component/Event/EditEventForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { useEvent } from '../../hooks/useEvent';\r\n\r\nconst EditEventForm = () => {\r\n  const { id } = useParams(); // Get the event ID from URL params\r\n  const { getEventById, updateEvent } = useEvent(); // Custom hook to handle event fetching/updating\r\n  const navigate = useNavigate();\r\n\r\n  const [eventData, setEventData] = useState({\r\n    title: '',\r\n    description: '',\r\n    date: '',\r\n    location: '',\r\n    maxAttendees: 0,\r\n    image: null,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(true); // To handle loading state\r\n  const [error, setError] = useState(''); // To handle any errors\r\n\r\n  useEffect(() => {\r\n    const fetchEvent = async () => {\r\n      try {\r\n        const event = await getEventById(id); // Fetch event data by ID\r\n        if (event) {\r\n          setEventData(event); // Populate the form with fetched data\r\n        }\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError('Failed to load event data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchEvent();\r\n  }, [id, getEventById]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setEventData({ ...eventData, [name]: value }); // Handle input changes for text, number, and date fields\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    setEventData({ ...eventData, image: e.target.files[0] }); // Handle file (image) input\r\n  };\r\n\r\n  const handleUpdateEvent = async (e) => {\r\n    e.preventDefault(); // Prevent default form submission\r\n    if (!eventData.title || !eventData.date || !eventData.location) {\r\n      setError('Please fill out all required fields');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await updateEvent(id, eventData); // Call the update function\r\n      navigate(`/event/${id}`); // Redirect to event details page after update\r\n    } catch (err) {\r\n      setError('Failed to update event');\r\n    }\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>{error}</p>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Edit Event</h2>\r\n      <form onSubmit={handleUpdateEvent}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Title\"\r\n          value={eventData.title}\r\n          onChange={handleChange}\r\n        />\r\n        <textarea\r\n          name=\"description\"\r\n          placeholder=\"Description\"\r\n          value={eventData.description}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          value={eventData.date}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"location\"\r\n          placeholder=\"Location\"\r\n          value={eventData.location}\r\n          onChange={handleChange}\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          name=\"maxAttendees\"\r\n          placeholder=\"Max Attendees\"\r\n          value={eventData.maxAttendees}\r\n          onChange={(e) =>\r\n            setEventData({ ...eventData, maxAttendees: parseInt(e.target.value) })\r\n          }\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          name=\"image\"\r\n          onChange={handleFileChange}\r\n        />\r\n        <button type=\"submit\">Update Event</button>\r\n      </form>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditEventForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}